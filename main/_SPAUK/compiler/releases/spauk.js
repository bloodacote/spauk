// SPAuk engine (build v1) by bloodacote 
// Compiled time: 2024-04-22 22:51:05 
async function loadUrl(url, method = "GET", data = {}) {return new Promise((resolve, reject) => {var xhr = new XMLHttpRequest();xhr.open(method, url, false);xhr.onreadystatechange = function() {if (xhr.readyState == 4) {resolve(xhr.responseText);}};xhr.send(JSON.stringify(data));});}async function loadApi(url, method = "GET", data = {}) {var result = await loadUrl(url, method, data);return JSON.parse(result);}async function loadJSON(url) {var result = await loadUrl(url, "get", {});return JSON.parse(result);}class PropElement {constructor(elem = null) {this.element = elem;}move(place = null) {if (place != null) {place = toElem(place);console.log(place);place.appendChild(this.element);}}insertBefore(place = null) {if (place != null) {place = toElem(place);place.before(this.element);}}insertAfter(place = null) {if (place != null) {place = toElem(place);place.after(this.element);}}addClass(className) {this.element.classList.add(className);}removeClass(className) {this.element.classList.remove(className);}setClass(classText) {if (classText instanceof Array) {classText = classText.join(" ");}this.element.classList.value = classText;}setHTML(content) {this.element.innerHTML = content;}setText(content) {this.element.innerText = content;}setValue(content) {this.element.value = content;}getContent() {if (this.element.innerHTML == null) {return this.element.value;} else {return this.element.innerHTML;}}}function elemType(elemVar) {var result = "other"; if (typeof elemVar == "string") {var elem = document.querySelector(elemVar);if (elem != null) { result = "selector";}}if (elemVar instanceof Element == true) {result = "elem";}if (elemVar instanceof PropElement == true) {result = "prop";}return result;}function toElem(elemVar) {var elem = null;var type = elemType(elemVar);if (type == "selector") {elem = document.querySelector(elemVar);}if (type == "elem") {elem = elemVar;}if (type == "prop") {elem = elemVar.element;}return elem;}function toProp(elemVar) {var elem = null;var type = elemType(elemVar);if (type == "selector") {var findElem = document.querySelector(elemVar);if (findElem != null) {elem = new PropElement(findElem);}}if (type == "elem") {elem = new PropElement(elemVar);}if (type == "prop") {elem = elemVar;}return elem;}function getSelectorData(selector) {selector = selector.replaceAll(" ", "");var selectorData = {type: null,id: null,classes: []};var selectorParts = selector.split("#");if (selectorParts.length != 1) {selectorData.type = selectorParts[0];var classParts = selectorParts[1].split(".");selectorData.id = classParts[0];} else {var classParts = selectorParts[0].split(".");selectorData.type = classParts[0];}for (let i = 1; i < classParts.length; i++) {selectorData.classes.push(classParts[i]);}return selectorData;}function addElem(selector = "div", place = null, content = null) {var elemData = getSelectorData(selector);if (elemData.type == "") {elemData.type = "div";}var elem = document.createElement(elemData.type);if (elemData.id != null) {elem.id = elemData.id;}for (let newClass of elemData.classes) {elem.classList.add(newClass);}if (place != null) {place = toElem(place);place.appendChild(elem);}if (content != null) {elem.innerText = content;elem.value = content;}return elem;}function addProp(selector = "div", place = null, content = null) {var elem = addElem(selector, place, content);var prop = new PropElement(elem);return prop;}class SpaukRouter {constructor(pageMap = {"/": "/index.html"}, defaultPage = "/", notFoundPage = "/404.html") {this.pageMap = pageMap;this.defaultPage = defaultPage;this.notFoundPage = notFoundPage;}get(link = "/") {let page = this.notFoundPage;link = link.split("?");link = link[0];link += "/";if (link == "//" || link == "/") {page = this.defaultPage;} else {for (let [mapLink, mapPage] of Object.entries(this.pageMap)) {if (link.startsWith(mapLink + "/")) {page = mapPage;}}}return page;}set(link = "/") {window.location.href = link;}goto(link = "/") {window.history.pushState(link, "", link);}back(isReload = false) {window.history.back();if (isReload == true) {window.location.href = window.location.href;}}setMap(pageMap) {if (typeof(pageMap) == "object") {this.pageMap = pageMap;}}setDefaultPage(defaultPage) {this.defaultPage = defaultPage;}setNotFoundPage(notFoundPage) {this.notFoundPage = notFoundPage;}}const Router = new SpaukRouter();